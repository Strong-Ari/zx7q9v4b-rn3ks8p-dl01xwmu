import { useState, useEffect } from 'react';

export interface CommentData {
  username: string;
  comment: string;
  avatar?: string;
  timestamp?: string;
}

interface UseAutoGeneratedCommentResult {
  isGenerating: boolean;
  isSuccess: boolean;
  error: string | null;
  commentData: CommentData | null;
  regenerate: () => void;
}

// Commentaires prédéfinis pour éviter les appels API
const PREDEFINED_COMMENTS: CommentData[] = [
  {
    username: "gaming_pro_2024",
    comment: "Does my bro Watch corn pub?",
    timestamp: new Date().toISOString(),
  },
  {
    username: "ball_master_99",
    comment: "This is so satisfying to watch 😍",
    timestamp: new Date().toISOString(),
  },
  {
    username: "physics_nerd",
    comment: "The collision physics look amazing!",
    timestamp: new Date().toISOString(),
  },
  {
    username: "tiktok_addict",
    comment: "Why is this so addictive? 🤔",
    timestamp: new Date().toISOString(),
  },
  {
    username: "gamer_girl_2k",
    comment: "I could watch this all day",
    timestamp: new Date().toISOString(),
  },
  {
    username: "random_user123",
    comment: "Anyone else hear the music? 🎵",
    timestamp: new Date().toISOString(),
  },
  {
    username: "viral_content",
    comment: "This is going viral for sure",
    timestamp: new Date().toISOString(),
  },
  {
    username: "ball_escape_fan",
    comment: "Best ball game ever!",
    timestamp: new Date().toISOString(),
  },
];

export const useAutoGeneratedComment = (): UseAutoGeneratedCommentResult => {
  const [isGenerating, setIsGenerating] = useState(false);
  const [isSuccess, setIsSuccess] = useState(false);
  const [error, setError] = useState<string | null>(null);
  const [commentData, setCommentData] = useState<CommentData | null>(null);

  const generateComment = () => {
    setIsGenerating(true);
    setError(null);
    setIsSuccess(false);

    // Simuler un délai de génération
    setTimeout(() => {
      try {
        // Sélectionner un commentaire aléatoire
        const randomIndex = Math.floor(Math.random() * PREDEFINED_COMMENTS.length);
        const selectedComment = PREDEFINED_COMMENTS[randomIndex];

        // Mettre à jour le timestamp
        const generatedComment: CommentData = {
          ...selectedComment,
          timestamp: new Date().toISOString(),
        };

        setCommentData(generatedComment);
        setIsSuccess(true);
        setIsGenerating(false);

        console.log('[useAutoGeneratedComment] Commentaire généré:', generatedComment);

      } catch (err) {
        const errorMessage = err instanceof Error ? err.message : 'Erreur inconnue';
        setError(errorMessage);
        setIsGenerating(false);
        setIsSuccess(false);

        console.error('[useAutoGeneratedComment] Erreur:', errorMessage);
      }
    }, 1000 + Math.random() * 2000); // Délai aléatoire entre 1-3 secondes
  };

  const regenerate = () => {
    generateComment();
  };

  // Auto-génération au montage du composant
  useEffect(() => {
    generateComment();
  }, []);

  return {
    isGenerating,
    isSuccess,
    error,
    commentData,
    regenerate,
  };
};

export default useAutoGeneratedComment;