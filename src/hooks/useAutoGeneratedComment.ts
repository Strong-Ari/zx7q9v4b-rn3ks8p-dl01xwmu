import { useState, useEffect } from "react";

interface CommentData {
  imagePath: string;
  username: string;
  comment: string;
  isLoading: boolean;
  error: string | null;
}

/**
 * Hook pour g√©n√©rer automatiquement un commentaire TikTok
 * Se d√©clenche √† chaque rafra√Æchissement de Remotion Studio
 */
export function useAutoGeneratedComment(): CommentData {
  const [commentData, setCommentData] = useState<CommentData>({
    imagePath: "/generated/tiktok-comment-current.png",
    username: "",
    comment: "",
    isLoading: true,
    error: null,
  });

  useEffect(() => {
    // Fonction pour g√©n√©rer un nouveau commentaire
    const generateComment = async () => {
      try {
        setCommentData(prev => ({
          ...prev,
          isLoading: true,
          error: null,
        }));

        console.log("üé¨ G√©n√©ration automatique d'un commentaire TikTok...");

        const response = await fetch("/api/generate-tiktok-comment", {
          method: "POST",
          headers: {
            "Content-Type": "application/json",
          },
          body: JSON.stringify({
            maxRetries: 2, // Moins de tentatives pour √©viter les d√©lais
          }),
        });

        if (!response.ok) {
          throw new Error(`Erreur HTTP: ${response.status}`);
        }

        const result = await response.json();

        if (result.success) {
          setCommentData({
            imagePath: result.data.imagePath,
            username: result.data.username,
            comment: result.data.comment,
            isLoading: false,
            error: null,
          });
          console.log("‚úÖ Commentaire g√©n√©r√© avec succ√®s:", result.data);
        } else {
          throw new Error(result.error || "Erreur lors de la g√©n√©ration");
        }
      } catch (error) {
        console.error("‚ùå Erreur lors de la g√©n√©ration automatique:", error);
        setCommentData(prev => ({
          ...prev,
          isLoading: false,
          error: error instanceof Error ? error.message : "Erreur inconnue",
        }));
      }
    };

    // G√©n√©rer imm√©diatement au montage
    generateComment();

    // Optionnel: R√©g√©n√©rer p√©riodiquement (pour le d√©veloppement)
    const interval = setInterval(generateComment, 30000); // Toutes les 30 secondes

    return () => {
      clearInterval(interval);
    };
  }, []); // Se d√©clenche uniquement au montage (rafra√Æchissement)

  return commentData;
}

/**
 * Hook pour g√©n√©rer un commentaire avec d√©clenchement manuel
 */
export function useManualGeneratedComment() {
  const [commentData, setCommentData] = useState<CommentData>({
    imagePath: "/generated/tiktok-comment-current.png",
    username: "",
    comment: "",
    isLoading: false,
    error: null,
  });

  const generateComment = async () => {
    try {
      setCommentData(prev => ({
        ...prev,
        isLoading: true,
        error: null,
      }));

      const response = await fetch("/api/generate-tiktok-comment", {
        method: "POST",
        headers: {
          "Content-Type": "application/json",
        },
        body: JSON.stringify({
          maxRetries: 3,
        }),
      });

      if (!response.ok) {
        throw new Error(`Erreur HTTP: ${response.status}`);
      }

      const result = await response.json();

      if (result.success) {
        setCommentData({
          imagePath: result.data.imagePath,
          username: result.data.username,
          comment: result.data.comment,
          isLoading: false,
          error: null,
        });
      } else {
        throw new Error(result.error || "Erreur lors de la g√©n√©ration");
      }
    } catch (error) {
      setCommentData(prev => ({
        ...prev,
        isLoading: false,
        error: error instanceof Error ? error.message : "Erreur inconnue",
      }));
    }
  };

  return {
    ...commentData,
    generateComment,
  };
}

export default useAutoGeneratedComment;