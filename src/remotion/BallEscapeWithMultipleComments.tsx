import { AbsoluteFill, useCurrentFrame, useVideoConfig } from "remotion";
import React from "react";
import { BallEscape } from "./BallEscape";
import { TikTokComment, COMMENT_POSITIONS } from "./TikTokComment/TikTokComment";
import { useAutoGeneratedComment } from "../hooks/useAutoGeneratedComment";

interface BallEscapeWithMultipleCommentsProps {
  /**
   * Nombre de commentaires √† g√©n√©rer (max 4)
   */
  commentCount?: number;
  
  /**
   * D√©lai entre les commentaires (en frames)
   */
  commentDelay?: number;
  
  /**
   * Activer/d√©sactiver la g√©n√©ration automatique
   */
  autoGenerate?: boolean;
}

/**
 * Composition BallEscape avec plusieurs commentaires TikTok auto-g√©n√©r√©s
 * Optimis√©e pour les performances et l'exp√©rience utilisateur
 */
export const BallEscapeWithMultipleComments: React.FC<BallEscapeWithMultipleCommentsProps> = ({
  commentCount = 1,
  commentDelay = 120,
  autoGenerate = true,
}) => {
  const frame = useCurrentFrame();
  const { durationInFrames } = useVideoConfig();
  
  // G√©n√©rer automatiquement un commentaire principal
  const mainComment = useAutoGeneratedComment();
  
  // Positions pred√©finies pour les commentaires multiples
  const commentPositions = [
    { ...COMMENT_POSITIONS.bottomLeft, scale: 1.2 },
    { ...COMMENT_POSITIONS.bottomRight, scale: 1.0 },
    { ...COMMENT_POSITIONS.centerLeft, scale: 0.9 },
    { ...COMMENT_POSITIONS.centerRight, scale: 0.9 },
  ];
  
  // Calculer les timings pour chaque commentaire
  const commentTimings = Array.from({ length: Math.min(commentCount, 4) }, (_, i) => ({
    startFrame: 60 + (i * commentDelay),
    duration: Math.min(240, durationInFrames - (60 + (i * commentDelay))),
    position: commentPositions[i],
    animationType: ["slideIn", "fadeIn", "scaleIn", "bounceIn"][i] as const,
  }));

  return (
    <AbsoluteFill>
      {/* Composition principale BallEscape */}
      <BallEscape />

      {/* Overlay subtil pour am√©liorer la lisibilit√© */}
      <div
        style={{
          position: "absolute",
          top: 0,
          left: 0,
          right: 0,
          bottom: 0,
          background: `
            radial-gradient(circle at 20% 80%, rgba(0,0,0,0.2) 0%, transparent 50%),
            radial-gradient(circle at 80% 80%, rgba(0,0,0,0.2) 0%, transparent 50%),
            linear-gradient(to bottom, transparent 50%, rgba(0,0,0,0.1) 90%)
          `,
          pointerEvents: "none",
          zIndex: 5,
        }}
      />

      {/* Commentaire principal auto-g√©n√©r√© */}
      {autoGenerate && !mainComment.isLoading && !mainComment.error && (
        <TikTokComment
          imagePath={mainComment.imagePath}
          x={commentPositions[0].x}
          y={commentPositions[0].y}
          scale={commentPositions[0].scale}
          startFrame={commentTimings[0].startFrame}
          duration={commentTimings[0].duration}
          animationType={commentTimings[0].animationType}
          animationDuration={45}
          rotation={Math.random() * 4 - 2} // Rotation al√©atoire -2¬∞ √† +2¬∞
          className="auto-generated-comment main-comment"
        />
      )}

      {/* Commentaires statiques additionnels (si commentCount > 1) */}
      {commentCount > 1 && !mainComment.isLoading && Array.from({ length: commentCount - 1 }, (_, i) => (
        <TikTokComment
          key={`static-comment-${i}`}
          imagePath={mainComment.imagePath} // R√©utiliser la m√™me image
          x={commentTimings[i + 1].position.x}
          y={commentTimings[i + 1].position.y}
          scale={commentTimings[i + 1].position.scale}
          startFrame={commentTimings[i + 1].startFrame}
          duration={commentTimings[i + 1].duration}
          animationType={commentTimings[i + 1].animationType}
          animationDuration={30 + (i * 10)}
          rotation={Math.random() * 6 - 3}
          opacity={0.8 - (i * 0.1)} // Opacit√© d√©croissante
          className={`static-comment comment-${i}`}
        />
      ))}

      {/* Indicateur de chargement stylis√© */}
      {mainComment.isLoading && (
        <div
          style={{
            position: "absolute",
            bottom: 120,
            left: 20,
            color: "white",
            fontSize: 14,
            fontFamily: "system-ui, sans-serif",
            backgroundColor: "rgba(0,0,0,0.8)",
            padding: "12px 16px",
            borderRadius: "12px",
            display: "flex",
            alignItems: "center",
            gap: "12px",
            zIndex: 15,
            border: "1px solid rgba(255,255,255,0.2)",
            backdropFilter: "blur(10px)",
          }}
        >
          <div
            style={{
              width: "16px",
              height: "16px",
              border: "2px solid transparent",
              borderTop: "2px solid #ff6b6b",
              borderRadius: "50%",
              animation: "spin 1s linear infinite",
            }}
          />
          <span>G√©n√©ration du commentaire TikTok...</span>
        </div>
      )}

      {/* Indicateur d'erreur am√©lior√© */}
      {mainComment.error && (
        <div
          style={{
            position: "absolute",
            bottom: 120,
            left: 20,
            color: "#ff6b6b",
            fontSize: 13,
            fontFamily: "system-ui, sans-serif",
            backgroundColor: "rgba(255, 107, 107, 0.1)",
            padding: "12px 16px",
            borderRadius: "12px",
            maxWidth: "350px",
            zIndex: 15,
            border: "1px solid rgba(255, 107, 107, 0.3)",
            backdropFilter: "blur(10px)",
          }}
        >
          <div style={{ fontWeight: "bold", marginBottom: "4px" }}>
            ‚ùå Erreur de g√©n√©ration
          </div>
          <div style={{ fontSize: "11px", opacity: 0.9 }}>
            {mainComment.error}
          </div>
        </div>
      )}

      {/* M√©tadonn√©es du commentaire avec animation */}
      {mainComment.username && mainComment.comment && (
        <div
          style={{
            position: "absolute",
            top: 20,
            right: 20,
            color: "white",
            fontSize: 11,
            fontFamily: "system-ui, sans-serif",
            backgroundColor: "rgba(0,0,0,0.7)",
            padding: "8px 12px",
            borderRadius: "8px",
            maxWidth: "250px",
            zIndex: 15,
            border: "1px solid rgba(255,255,255,0.1)",
            backdropFilter: "blur(8px)",
            animation: `fadeInUp 0.5s ease-out ${mainComment.isLoading ? 'paused' : 'running'}`,
          }}
        >
          <div style={{ fontWeight: "bold", color: "#ff6b6b" }}>
            @{mainComment.username}
          </div>
          <div style={{ marginTop: "4px", fontSize: "10px", lineHeight: "1.3" }}>
            {mainComment.comment.slice(0, 80)}
            {mainComment.comment.length > 80 && "..."}
          </div>
        </div>
      )}

      {/* Compteur de commentaires */}
      <div
        style={{
          position: "absolute",
          bottom: 60,
          right: 20,
          color: "white",
          fontSize: 12,
          fontFamily: "system-ui, sans-serif",
          backgroundColor: "rgba(0,0,0,0.6)",
          padding: "6px 10px",
          borderRadius: "6px",
          opacity: 0.8,
          zIndex: 15,
        }}
      >
        üí¨ {commentCount} commentaire{commentCount > 1 ? 's' : ''}
      </div>

      {/* Filigrane avec informations suppl√©mentaires */}
      <div
        style={{
          position: "absolute",
          bottom: 20,
          left: 20,
          color: "white",
          fontSize: 14,
          fontFamily: "system-ui, sans-serif",
          fontWeight: "bold",
          textShadow: "2px 2px 4px rgba(0,0,0,0.8)",
          opacity: 0.9,
          zIndex: 10,
        }}
      >
        üì± TikTok Auto ‚Ä¢ Frame {frame}
      </div>
    </AbsoluteFill>
  );
};

export default BallEscapeWithMultipleComments;