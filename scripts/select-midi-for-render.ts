#!/usr/bin/env tsx

import fs from "fs";
import path from "path";

/**
 * Script pour s√©lectionner un fichier MIDI al√©atoire avant le rendu
 * Ce script est ex√©cut√© par le script "prerender" dans package.json
 */

const MIDIS_DIR = path.join(process.cwd(), "public", "midis");
const SELECTED_MIDI_FILE = path.join(
  process.cwd(),
  "public",
  "selected-midi.json",
);

interface SelectedMidiInfo {
  fileName: string;
  selectedAt: string;
  renderTimestamp: number;
}

function selectRandomMidiFile(): void {
  try {
    console.log("[select-midi] üéµ S√©lection d'un fichier MIDI al√©atoire...");

    // Lister tous les fichiers MIDI disponibles
    if (!fs.existsSync(MIDIS_DIR)) {
      console.error(`[select-midi] ‚ùå Dossier MIDI non trouv√©: ${MIDIS_DIR}`);
      process.exit(1);
    }

    const allFiles = fs.readdirSync(MIDIS_DIR);
    const midiFiles = allFiles.filter((file) =>
      file.toLowerCase().endsWith(".mid"),
    );

    if (midiFiles.length === 0) {
      console.error(
        "[select-midi] ‚ùå Aucun fichier MIDI trouv√© dans le dossier",
      );
      process.exit(1);
    }

    console.log(
      `[select-midi] üìÅ ${midiFiles.length} fichiers MIDI disponibles:`,
    );
    midiFiles.forEach((file, index) => {
      console.log(`[select-midi]   ${index + 1}. ${file}`);
    });

    // S√©lectionner un fichier al√©atoire
    const randomIndex = Math.floor(Math.random() * midiFiles.length);
    const selectedFile = midiFiles[randomIndex];

    // Cr√©er l'information de s√©lection
    const selectionInfo: SelectedMidiInfo = {
      fileName: selectedFile,
      selectedAt: new Date().toISOString(),
      renderTimestamp: Date.now(),
    };

    // Sauvegarder la s√©lection
    fs.writeFileSync(
      SELECTED_MIDI_FILE,
      JSON.stringify(selectionInfo, null, 2),
      "utf8",
    );

    console.log(`[select-midi] ‚úÖ Fichier MIDI s√©lectionn√©: ${selectedFile}`);
    console.log(`[select-midi] üíæ Sauvegard√© dans: ${SELECTED_MIDI_FILE}`);
    console.log(`[select-midi] üïê Timestamp: ${selectionInfo.selectedAt}`);
  } catch (error) {
    console.error(
      "[select-midi] ‚ùå Erreur lors de la s√©lection du fichier MIDI:",
      error,
    );
    process.exit(1);
  }
}

// Fonction pour obtenir le fichier MIDI s√©lectionn√© (utilis√© par l'app)
export function getSelectedMidiFile(): string | null {
  try {
    if (!fs.existsSync(SELECTED_MIDI_FILE)) {
      console.log(
        "[select-midi] ‚ÑπÔ∏è  Aucun fichier MIDI pr√©-s√©lectionn√©, s√©lection al√©atoire...",
      );
      return null;
    }

    const content = fs.readFileSync(SELECTED_MIDI_FILE, "utf8");
    const selectionInfo: SelectedMidiInfo = JSON.parse(content);

    console.log(
      `[select-midi] üìñ Fichier MIDI pr√©-s√©lectionn√©: ${selectionInfo.fileName}`,
    );
    return selectionInfo.fileName;
  } catch (error) {
    console.error(
      "[select-midi] ‚ö†Ô∏è  Erreur lors de la lecture du fichier s√©lectionn√©:",
      error,
    );
    return null;
  }
}

// Si le script est ex√©cut√© directement
if (require.main === module) {
  selectRandomMidiFile();
}
